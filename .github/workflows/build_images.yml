name: Build images

on:
  release:
    types:
      - published
  push:
    branches:
      - 'trunk'
    paths-ignore:
      - '.env*'
      - 'docker-compose*.yaml'
      - '*/rhel/*'
      - '*/windows/*'
      - "**.md"

defaults:
  run:
    shell: bash

env:
  DOCKER_REPOSITORY: "zabbix"
  LATEST_BRANCH: ${{ github.event.repository.default_branch }}
  BASE_BUILD_NAME: "build-base"

jobs:
  init_build:
    name: Initialize build
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.os.outputs.list }}
      database: ${{ steps.database.outputs.list }}
      components: ${{ steps.components.outputs.list }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Check build.xml file
        id: build_exists
        run: |
            if [[ ! -f "./build.xml" ]]; then
                echo "::error::File build.xml is missing"
                exit 1
            fi

      - name: Prepare Operating System list
        id: os
        run: |
            os_list=$(jq -r '.os |  keys | [ .[] | tostring ] | @json' "./build.xml")

            echo "::set-output name=list::$os_list"

      - name: Prepare Platform list
        id: platform_list
        run: |
            platform_list=$(jq -r '.os | tostring  | @json' "./build.xml")

            echo "::set-output name=list::$platform_list"

      - name: Prepare Database engine list
        id: database
        run: |
            database_list=$(jq -r '[.components | values[] ] | sort | unique | del(.. | select ( . == "" ) ) | [ .[] | tostring ] | @json' "./build.xml")

            echo "::set-output name=list::$database_list"

      - name: Prepare Zabbix component list
        id: components
        run: |
            component_list=$(jq -r '.components | keys | [ .[] | tostring ] | @json' "./build.xml")

            echo "::set-output name=list::$component_list"

  build_base:
    timeout-minutes: 70
    name: Build base on ${{ matrix.os }}
    needs: init_build
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.init_build.outputs.os) }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Prepare Platform list
        id: platform_list
        run: |
            platform_list=$(jq -r '.os.${{ matrix.os }} | join(",")' "./build.xml")

            echo ::set-output name=list::$platform_list

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKER_REPOSITORY }}/zabbix-${{ env.BASE_BUILD_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=${{matrix.os}}-{{ branch }}
            type=raw,value={{branch}}-${{ matrix.os }}
            type=pep440,pattern={{version}},
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=push,prefix=${{ matrix.os }}-
            type=ref,event=push,suffix=-${{ matrix.os }}


      - name: Prepare environment (${{ github.event_name }})
        if: github.event_name == 'push'
        id: prepare_push
        run: |
          TAGS_ARRAY=()

          IMAGE_NAME="${{ env.DOCKER_REPOSITORY }}/zabbix-${{ env.BASE_BUILD_NAME }}"
          GIT_BRANCH="${{ github.ref }}"
          GIT_BRANCH=${GIT_BRANCH:11}

          echo "::debug::Branch - ${GIT_BRANCH}"

          if [ "${GIT_BRANCH}" == "trunk" ]; then
            TAGS_ARRAY+=("$IMAGE_NAME:${{ matrix.os }}-${GIT_BRANCH}")
            TAGS_ARRAY+=("$IMAGE_NAME:${GIT_BRANCH}-${{ matrix.os }}")
          else
            TAGS_ARRAY+=("$IMAGE_NAME:${{ matrix.os }}-${GIT_BRANCH}-latest")
            TAGS_ARRAY+=("$IMAGE_NAME:${GIT_BRANCH}-${{ matrix.os }}-latest")
          fi

          if [ "${{ matrix.os }}" == "alpine" ] && [ "${LATEST_BRANCH}" == "${GIT_BRANCH}" ]; then
            TAGS_ARRAY+=("$IMAGE_NAME:latest")
          fi

          if [ "${LATEST_BRANCH}" == "${GIT_BRANCH}" ]; then
            TAGS_ARRAY+=("$IMAGE_NAME:${{ matrix.os }}-latest")
          fi

          TAGS=$(printf -- "%s, " "${TAGS_ARRAY[@]}")

          echo "::debug::Tags - ${TAGS}"

          echo ::set-output name=image_name::${IMAGE_NAME}
          echo ::set-output name=image_tag_versions::$(printf -- "%s," "${TAGS_ARRAY[@]}")

      - name: Prepare environment (${{ github.event_name }})
        if: github.event_name == 'release' && github.event.action == 'published'
        id: prepare_release
        run: |
          TAGS_ARRAY=()

          IMAGE_NAME="${{ env.DOCKER_REPOSITORY }}/zabbix-${{ env.BASE_BUILD_NAME }}"
          RELEASE_VERSION="${{ github.ref }}"
          RELEASE_VERSION=${RELEASE_VERSION:10}
          GIT_BRANCH=${RELEASE_VERSION%.*}

          echo "::debug::Release version ${RELEASE_VERSION}. Branch ${GIT_BRANCH}"

          TAGS_ARRAY+=("$IMAGE_NAME:${{ matrix.os }}-${RELEASE_VERSION}")
          TAGS_ARRAY+=("$IMAGE_NAME:${RELEASE_VERSION}-${{ matrix.os }}")

          if [ "${{ matrix.os }}" == "alpine" ] && [ "${LATEST_BRANCH}" == "${GIT_BRANCH}" ]; then
            TAGS_ARRAY+=("$IMAGE_NAME:latest")
          fi

          TAGS=$(printf -- "--tag %s " "${TAGS_ARRAY[@]}")

          echo ::set-output name=image_name::${IMAGE_NAME}
          echo ::set-output name=image_tag_versions::$(printf -- ",%s" "${TAGS_ARRAY[@]}")

      - name: Prepare tags
        id: prepare_tags
        run: |
          if [ ! -z "${{ steps.prepare_push.outputs.image_tag_versions }}" ]; then
              TAGS="${{ steps.prepare_push.outputs.image_tag_versions }}"
              IMAGE_NAME="${{ steps.prepare_push.outputs.image_name }}"
          elif [ ! -z "${{ steps.prepare_release.outputs.image_tag_versions }}" ]; then
              TAGS="${{ steps.prepare_release.outputs.image_tag_versions }}"
              IMAGE_NAME="${{ steps.prepare_release.outputs.image_name }}"
          else
              exit 1
          fi

          echo ::set-output name=image_tag_versions::${TAGS}
          echo ::set-output name=image_name::${IMAGE_NAME}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./${{ env.BASE_BUILD_NAME }}/${{ matrix.os }}
          file: ./${{ env.BASE_BUILD_NAME }}/${{ matrix.os }}/Dockerfile
          platforms: ${{ steps.platform.outputs.list }}
          push: ${{ secrets.AUTO_PUSH_IMAGES }}
          tags: ${{ steps.prepare_tags.outputs.image_tag_versions }}

      - name: Image digest
        run: |
            echo ${{ steps.docker_build.outputs.digest }}
            echo "${{ steps.docker_build.outputs.digest }}" > ${{ env.BASE_BUILD_NAME }}_${{ matrix.os }}

      - uses: actions/upload-artifact@v2
        with:
         name: ${{ env.BASE_BUILD_NAME }}_${{ matrix.os }}
         path: ${{ env.BASE_BUILD_NAME }}_${{ matrix.os }}
         if-no-files-found: error

  build_base_database:
    timeout-minutes: 70
    needs: [ "build_base", "init_build"]
    name: Build ${{ matrix.build }} base on ${{ matrix.os }}
    strategy:
      fail-fast: false  
      matrix:
        build: ${{ fromJson(needs.init_build.outputs.database) }}
        os: ${{ fromJson(needs.init_build.outputs.os) }}

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Prepare Platform list
        id: platform_list
        run: |
            platform_list=$(jq -r '.os.${{ matrix.os }} | join(",")' "./build.xml")

            echo ::set-output name=list::$platform_list

      - name: Prepare environment (push)
        if: github.event_name == 'push'
        id: prepare_push
        run: |
          TAGS_ARRAY=()

          IMAGE_NAME="${{ env.DOCKER_REPOSITORY }}/zabbix-${{ matrix.build }}"
          GIT_BRANCH="${{ github.ref }}"
          GIT_BRANCH=${GIT_BRANCH:11}

          echo "::debug::Branch - ${GIT_BRANCH}"

          if [ "${GIT_BRANCH}" == "trunk" ]; then
            TAGS_ARRAY+=("$IMAGE_NAME:${{ matrix.os }}-${GIT_BRANCH}")
            TAGS_ARRAY+=("$IMAGE_NAME:${GIT_BRANCH}-${{ matrix.os }}")
          else
            TAGS_ARRAY+=("$IMAGE_NAME:${{ matrix.os }}-${GIT_BRANCH}-latest")
            TAGS_ARRAY+=("$IMAGE_NAME:${GIT_BRANCH}-${{ matrix.os }}-latest")
          fi

          if [ "${{ matrix.os }}" == "alpine" ] && [ "${LATEST_BRANCH}" == "${GIT_BRANCH}" ]; then
            TAGS_ARRAY+=("$IMAGE_NAME:latest")
          fi

          if [ "${LATEST_BRANCH}" == "${GIT_BRANCH}" ]; then
            TAGS_ARRAY+=("$IMAGE_NAME:${{ matrix.os }}-latest")
          fi

          TAGS=$(printf -- "%s, " "${TAGS_ARRAY[@]}")

          echo "::debug::Tags - ${TAGS}"

          echo ::set-output name=image_name::${IMAGE_NAME}
          echo ::set-output name=image_tag_versions::$(printf -- "%s," "${TAGS_ARRAY[@]}")
          echo ::set-output name=base_tag::${TAGS_ARRAY[1]#*:}

      - name: Prepare environment (release)
        if: github.event_name == 'release' && github.event.action == 'published'
        id: prepare_release
        run: |
          TAGS_ARRAY=()

          IMAGE_NAME="${{ env.DOCKER_REPOSITORY }}/zabbix-${{ matrix.build }}"
          RELEASE_VERSION="${{ github.ref }}"
          RELEASE_VERSION=${RELEASE_VERSION:10}
          GIT_BRANCH=${RELEASE_VERSION%.*}

          echo "::debug::Release version ${RELEASE_VERSION}. Branch ${GIT_BRANCH}"

          TAGS_ARRAY+=("$IMAGE_NAME:${{ matrix.os }}-${RELEASE_VERSION}")
          TAGS_ARRAY+=("$IMAGE_NAME:${RELEASE_VERSION}-${{ matrix.os }}")

          if [ "${{ matrix.os }}" == "alpine" ] && [ "${LATEST_BRANCH}" == "${GIT_BRANCH}" ]; then
            TAGS_ARRAY+=("$IMAGE_NAME:latest")
          fi

          TAGS=$(printf -- "--tag %s " "${TAGS_ARRAY[@]}")

          echo ::set-output name=image_name::${IMAGE_NAME}
          echo ::set-output name=image_tag_versions::$(printf -- ",%s" "${TAGS_ARRAY[@]}")
          echo ::set-output name=base_tag::${TAGS_ARRAY[1]#*:}

      - uses: actions/download-artifact@v2
        with:
          name: build-base_${{ matrix.os }}

      - name: Prepare tags
        id: prepare_tags
        run: |
          if [ ! -z "${{ steps.prepare_push.outputs.image_tag_versions }}" ]; then
              TAGS="${{ steps.prepare_push.outputs.image_tag_versions }}"
              IMAGE_NAME="${{ steps.prepare_push.outputs.image_name }}"
              BASE_TAG="${{ steps.prepare_push.outputs.base_tag }}"
          elif [ ! -z "${{ steps.prepare_release.outputs.image_tag_versions }}" ]; then
              TAGS="${{ steps.prepare_release.outputs.image_tag_versions }}"
              IMAGE_NAME="${{ steps.prepare_release.outputs.image_name }}"
              BASE_TAG="${{ steps.prepare_release.outputs.base_tag }}"
          else
              exit 1
          fi

          BASE_TAG=$(cat build-base_${{ matrix.os }})

          echo ::set-output name=image_tag_versions::${TAGS}
          echo ::set-output name=image_name::${IMAGE_NAME}
          echo ::set-output name=base_tag::${BASE_TAG}


      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.build }}/${{ matrix.os }}
          file: ./${{ matrix.build }}/${{ matrix.os }}/Dockerfile
          platforms: ${{ steps.platform.outputs.list }}
          push: ${{ secrets.AUTO_PUSH_IMAGES }}
          tags: ${{ steps.prepare_tags.outputs.image_tag_versions }}
          build-args: BUILD_BASE_IMAGE=${{ env.DOCKER_REPOSITORY }}/zabbix-build-base@${{ steps.prepare_tags.outputs.base_tag }}

      - name: Image digest
        run: |
            echo ${{ steps.docker_build.outputs.digest }}
            echo "${{ steps.docker_build.outputs.digest }}" > ${{ matrix.build }}_${{ matrix.os }}

      - uses: actions/upload-artifact@v2
        with:
         name: ${{ matrix.build }}_${{ matrix.os }}
         path: ${{ matrix.build }}_${{ matrix.os }}
         if-no-files-found: error

  build_images:
    timeout-minutes: 70
    needs: [ "build_base_database", "init_build"]
    name: Build ${{ matrix.build }} base on ${{ matrix.os }}
    strategy:
      fail-fast: false  
      matrix:
        build: ${{ fromJson(needs.init_build.outputs.components) }}
        os: ${{ fromJson(needs.init_build.outputs.os) }}

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Prepare platform list
        id: platform
        run: |
          DOCKER_PLATFORM="linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64"
          # ,linux/s390x"

          if [ "${{ matrix.os }}" == "ubuntu" ]; then
            DOCKER_PLATFORM="linux/amd64,linux/arm/v7,linux/arm64"
            #,linux/ppc64le"
          fi

          # Chromium package does not have additional architectures support
          if [ "${{ matrix.build }}" == "web-service" ]; then
            DOCKER_PLATFORM="linux/amd64,linux/arm64"
          fi

          if [ "${{ matrix.os }}" == "ol" ]; then
            DOCKER_PLATFORM="linux/amd64,linux/arm64"
          fi

          echo ::set-output name=list::${DOCKER_PLATFORM}

      - name: Prepare environment (push)
        if: github.event_name == 'push'
        id: prepare_push
        run: |
          TAGS_ARRAY=()

          IMAGE_NAME="${{ env.DOCKER_REPOSITORY }}/zabbix-${{ matrix.build }}"
          GIT_BRANCH="${{ github.ref }}"
          GIT_BRANCH=${GIT_BRANCH:11}

          echo "::debug::Branch - ${GIT_BRANCH}"

          if [ "${GIT_BRANCH}" == "trunk" ]; then
            TAGS_ARRAY+=("$IMAGE_NAME:${{ matrix.os }}-${GIT_BRANCH}")
            TAGS_ARRAY+=("$IMAGE_NAME:${GIT_BRANCH}-${{ matrix.os }}")
          else
            TAGS_ARRAY+=("$IMAGE_NAME:${{ matrix.os }}-${GIT_BRANCH}-latest")
            TAGS_ARRAY+=("$IMAGE_NAME:${GIT_BRANCH}-${{ matrix.os }}-latest")
          fi

          if [ "${{ matrix.os }}" == "alpine" ] && [ "${LATEST_BRANCH}" == "${GIT_BRANCH}" ]; then
            TAGS_ARRAY+=("$IMAGE_NAME:latest")
          fi

          if [ "${LATEST_BRANCH}" == "${GIT_BRANCH}" ]; then
            TAGS_ARRAY+=("$IMAGE_NAME:${{ matrix.os }}-latest")
          fi

          TAGS=$(printf -- "%s, " "${TAGS_ARRAY[@]}")

          echo "::debug::Tags - ${TAGS}"

          echo ::set-output name=image_name::${IMAGE_NAME}
          echo ::set-output name=image_tag_versions::$(printf -- "%s," "${TAGS_ARRAY[@]}")
          echo ::set-output name=base_tag::${TAGS_ARRAY[1]#*:}

      - name: Prepare environment (release)
        if: github.event_name == 'release' && github.event.action == 'published'
        id: prepare_release
        run: |
          TAGS_ARRAY=()

          IMAGE_NAME="${{ env.DOCKER_REPOSITORY }}/zabbix-${{ matrix.build }}"
          RELEASE_VERSION="${{ github.ref }}"
          RELEASE_VERSION=${RELEASE_VERSION:10}
          GIT_BRANCH=${RELEASE_VERSION%.*}

          echo "::debug::Release version ${RELEASE_VERSION}. Branch ${GIT_BRANCH}"

          TAGS_ARRAY+=("$IMAGE_NAME:${{ matrix.os }}-${RELEASE_VERSION}")
          TAGS_ARRAY+=("$IMAGE_NAME:${RELEASE_VERSION}-${{ matrix.os }}")

          if [ "${{ matrix.os }}" == "alpine" ] && [ "${LATEST_BRANCH}" == "${GIT_BRANCH}" ]; then
            TAGS_ARRAY+=("$IMAGE_NAME:latest")
          fi

          TAGS=$(printf -- "--tag %s " "${TAGS_ARRAY[@]}")


          echo ::set-output name=image_name::${IMAGE_NAME}
          echo ::set-output name=image_tag_versions::$(printf -- ",%s" "${TAGS_ARRAY[@]}")

      - name: Detect Build Base Image
        id: build_base_image
        run: |
          BUILD_BASE="build-mysql"
          if [[ "${{ matrix.build }}" == *"pgsql" ]]; then
              BUILD_BASE="build-pgsql"
          fi
          if [[ "${{ matrix.build }}" == *"sqlite3" ]]; then
              BUILD_BASE="build-mysql"
          fi

          echo ::set-output name=build_base::${BUILD_BASE}

      - uses: actions/download-artifact@v2
        with:
          name: ${{ steps.build_base_image.outputs.build_base }}_${{ matrix.os }}

      - name: Prepare tags
        id: prepare_tags
        run: |
          if [ ! -z "${{ steps.prepare_push.outputs.image_tag_versions }}" ]; then
              TAGS="${{ steps.prepare_push.outputs.image_tag_versions }}"
              IMAGE_NAME="${{ steps.prepare_push.outputs.image_name }}"
          elif [ ! -z "${{ steps.prepare_release.outputs.image_tag_versions }}" ]; then
              TAGS="${{ steps.prepare_release.outputs.image_tag_versions }}"
              IMAGE_NAME="${{ steps.prepare_release.outputs.image_name }}"
          else
              exit 1
          fi

          BASE_TAG=$(cat ${{ steps.build_base_image.outputs.build_base }}_${{ matrix.os }})

          echo ::set-output name=image_tag_versions::${TAGS}
          echo ::set-output name=image_name::${IMAGE_NAME}
          echo ::set-output name=base_tag::${BASE_TAG}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.build }}/${{ matrix.os }}
          file: ./${{ matrix.build }}/${{ matrix.os }}/Dockerfile
          platforms: ${{ steps.platform.outputs.list }}
          push: ${{ secrets.AUTO_PUSH_IMAGES }}
          tags: ${{ steps.prepare_tags.outputs.image_tag_versions }}
          build-args: BUILD_BASE_IMAGE=${{ env.DOCKER_REPOSITORY }}/zabbix-${{ steps.build_base_image.outputs.build_base }}@${{ steps.prepare_tags.outputs.base_tag }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
