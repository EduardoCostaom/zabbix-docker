name: Build images (DockerHub, Windows)

on:
  release:
    types:
      - published
  push:
    branches:
      - 'trunk'
    paths:
      - 'Dockerfiles/*/windows/*'
      - '.github/workflows/images_build_windows.yml'

defaults:
  run:
    shell: pwsh

env:
  DOCKER_REPOSITORY: "zabbix"
  LATEST_BRANCH: ${{ github.event.repository.default_branch }}
  BASE_BUILD_NAME: "build-base"

jobs:
  init_build:
    name: Initialize build
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.os.outputs.list }}
      components: ${{ steps.components.outputs.list }}
      is_default_branch: ${{ steps.branch_info.outputs.is_default }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 1

      - name: Check build.json file
        id: build_exists
        run: |
            if (-not(Test-Path -Path "./build.json" -PathType Leaf)) {
                throw "::error::File build.json is missing"
            }

      - name: Prepare Operating System list
        id: os
        run: |
            $os_list='["ltsc2022"]'

            echo "::set-output name=list::$os_list"

      - name: Prepare Zabbix component list
        id: components
        run: |
            $component_list='["agent","agent2"]'

            echo "::set-output name=list::$component_list"

      - name: Get branch info
        id: branch_info
        uses: tj-actions/branch-names@v5

  build_base:
    timeout-minutes: 70
    name: Build ${{ matrix.build }} base on ${{ matrix.os }}
    needs: init_build
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.init_build.outputs.os) }}
        build: ${{ fromJson(needs.init_build.outputs.components) }}

    runs-on: windows-2022
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 1

      - name: Generate tags
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKER_REPOSITORY }}/zabbix-${{ env.BASE_BUILD_NAME }}
          tags: |
            type=ref,event=branch,prefix=${{ matrix.build }}-${{ matrix.os }}-
            type=ref,event=branch,suffix=-${{ matrix.os }},prefix=${{ matrix.build }}-
          flavor: |
            latest=false

      - name: Build ${{ env.BASE_BUILD_NAME }}/${{ matrix.build }}-${{ matrix.os }} and push
        id: docker_build
        run: |
            $tags_array=$( "${{ steps.meta.outputs.tags}}".Split("`r`n") )
            $tags=$($tags_array | Foreach-Object { "--tag=$_" })

            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            if (-not $?) {throw "Failed"}

            echo "docker build --file=.\Dockerfiles\${{ env.BASE_BUILD_NAME }}\windows\Dockerfile.${{ matrix.build }} $tags .\Dockerfiles\${{ env.BASE_BUILD_NAME }}\windows\"
            docker build --file=.\Dockerfiles\${{ env.BASE_BUILD_NAME }}\windows\Dockerfile.${{ matrix.build }} $tags .\Dockerfiles\${{ env.BASE_BUILD_NAME }}\windows\
            if (-not $?) {throw "Failed"}

            Foreach ($tag in $tags_array) {
                echo "docker image push $tag"
                docker image push $tag
                if (-not $?) {throw "Failed"}
            }
            docker logout
            if (-not $?) {throw "Failed"}

            $digest=$(docker inspect $tags_array[0] --format "{{.Id}}")
            if (-not $?) {throw "Failed"}
            echo $digest
            echo "$digest" > ${{ env.BASE_BUILD_NAME }}_${{ matrix.os }}_${{ matrix.build }}

      - name: Upload SHA256 tag
        uses: actions/upload-artifact@v2.2.4
        with:
         name: ${{ env.BASE_BUILD_NAME }}_${{ matrix.os }}_${{ matrix.build }}
         path: ${{ env.BASE_BUILD_NAME }}_${{ matrix.os }}_${{ matrix.build }}
         if-no-files-found: error

  build_base_database:
    timeout-minutes: 70
    needs: [ "build_base", "init_build"]
    name: Build ${{ matrix.build }} sources on ${{ matrix.os }}
    strategy:
      fail-fast: false  
      matrix:
        build: ${{ fromJson(needs.init_build.outputs.components) }}
        os: ${{ fromJson(needs.init_build.outputs.os) }}

    runs-on: windows-2022
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.3.4

      - name: Generate tags
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKER_REPOSITORY }}/zabbix-${{ matrix.build }}
          tags: |
            type=ref,event=branch,prefix=${{ matrix.build }}-${{ matrix.os }}-
            type=ref,event=branch,suffix=-${{ matrix.os }},prefix=${{ matrix.build }}-
          flavor: |
            latest=false

      - name: Download SHA256 tag  build-base:${{ matrix.os }}
        uses: actions/download-artifact@v2.0.10
        with:
          name: ${{ env.BASE_BUILD_NAME }}_${{ matrix.os }}_${{ matrix.build }}

      - name: Retrieve build-base:${{ matrix.os }} SHA256 tag
        id: base_build
        run: |
          BASE_TAG=$(cat build-base_${{ matrix.os }}_${{ matrix.build }})
          BUILD_BASE_IMAGE=${{ env.DOCKER_REPOSITORY }}/zabbix-build-base@${BASE_TAG}

          echo ::set-output name=base_tag::${BASE_TAG}
          echo ::set-output name=base_build_image::${BUILD_BASE_IMAGE}

      - name: Build ${{ matrix.build }}/${{ matrix.os }}:${{ matrix.os }} and push
        id: docker_build
        run: |
            $tags_array=$( "${{ steps.meta.outputs.tags}}".Split("`r`n") )
            $tags=$($tags_array | Foreach-Object { "--tag=$_" })

            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            if (-not $?) {throw "Failed"}

            echo "docker build --file=.\Dockerfiles\build-mysql\windows\Dockerfile.${{ matrix.build }} $tags .\Dockerfiles\build-mysql\windows\"
            docker build --build-arg=BUILD_BASE_IMAGE=${{ steps.base_build.outputs.base_build_image }} --file=.\Dockerfiles\build-mysql\windows\Dockerfile.${{ matrix.build }} $tags .\Dockerfiles\build-mysql\windows\
            if (-not $?) {throw "Failed"}

            Foreach ($tag in $tags_array) {
                docker image push $tag
                if (-not $?) {throw "Failed"}
            }
            docker logout
            if (-not $?) {throw "Failed"}

            $digest=$(docker inspect $tags_array[0] --format "{{.Id}}")
            if (-not $?) {throw "Failed"}
            echo $digest
            echo "$digest" > base-mysql_${{ matrix.os }}_${{ matrix.build }})

      - name: Upload SHA256 tag
        uses: actions/upload-artifact@v2.2.4
        with:
         name: base-mysql_${{ matrix.os }}_${{ matrix.build }})
         path: base-mysql_${{ matrix.os }}_${{ matrix.build }})
         if-no-files-found: error

  build_images:
    timeout-minutes: 70
    needs: [ "build_base_database", "init_build"]
    name: Build ${{ matrix.build }} on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build: ${{ fromJson(needs.init_build.outputs.components) }}
        os: ${{ fromJson(needs.init_build.outputs.os) }}

    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Generate tags
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKER_REPOSITORY }}/zabbix-${{ matrix.build }}
          tags: |
            type=ref,event=branch,prefix=${{ matrix.os }}-
            type=ref,event=branch,suffix=-${{ matrix.os }}
          flavor: |
            latest=false

      - name: Download SHA256 tag for ${{ steps.build_base_image.outputs.build_base }}:${{ matrix.os }}
        uses: actions/download-artifact@v2.0.10
        with:
          name: base-mysql_${{ matrix.os }}_${{ matrix.build }}

      - name: Retrieve ${{ steps.build_base_image.outputs.build_base }}:${{ matrix.os }} SHA256 tag
        id: base_build
        run: |
          BASE_TAG=$(cat base-mysql_${{ matrix.os }}_${{ matrix.build }} )
          BUILD_BASE_IMAGE=${{ env.DOCKER_REPOSITORY }}/zabbix-build-mysql@${BASE_TAG}

          echo ::set-output name=base_tag::${BASE_TAG}
          echo ::set-output name=base_build_image::${BUILD_BASE_IMAGE}

      - name: Build ${{ matrix.build }}/${{ matrix.os }} and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./Dockerfiles/${{ matrix.build }}/${{ matrix.os }}
          file: ./Dockerfiles/${{ matrix.build }}/${{ matrix.os }}/Dockerfile
          platforms: ${{ steps.platform.outputs.list }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          build-args: BUILD_BASE_IMAGE=${{ steps.base_build.outputs.base_build_image }}
          labels: |
            org.opencontainers.image.revision=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            org.opencontainers.image.created=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
